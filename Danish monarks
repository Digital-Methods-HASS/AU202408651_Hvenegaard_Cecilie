---
title: "Danish Kings homework week 10"
author: "Cecilie Hvenegaard"
date: "2025-05-03"
output: html_document
---

```{r setup, include=FALSE}
knitr::opts_chunk$set(echo = TRUE)
```


```{r library, echo = FALSE}
library(tidyverse)

read_csv("data/kings.csv")

```


The task here is to load your Danish Monarchs csv into R using the `tidyverse` toolkit, calculate and explore the kings' duration of reign with pipes `%>%` in `dplyr` and plot it over time.

## Load the kings

Make sure to first create an  `.Rproj` workspace with a `data/` folder where you place either your own dataset or the provided `kings.csv` dataset. 

1. Look at the dataset that are you loading and check what its columns are separated by? (hint: open it in plain text editor to see)

List what is the

separator:_______  

2. Create a `kings` object in R with the different functions below and inspect the different outputs.
-  `read.csv()`
-  `read_csv()`
-  `read.csv2()` 
-  `read_csv2()`
```{r eval=FALSE}
# FILL IN THE CODE BELOW and review the outputs
kings1 <- read.csv("data/kings.csv")

kings2 <- read_csv("data/kings.csv")

kings3 <- read.csv2("data/kings.csv")

kings4 <- read_csv2("data/kings.csv")

```
Answer: 
1. Which of these functions is a `tidyverse` function? Read data with it below into a `kings` object
- The tidyverse function is kings2 and king4, which is a funtion that is downloaded into R. 
- kings1 and kings3 is the original R function or the "old school" function that is used if you don't put any packages in. 

2. What is the result of running `class()` on the `kings` object created with a tidyverse function.
- When putting king2 and kings4 into "class()" funtion it doesn't give a clear result on which it is "data.frame"

3. How many columns does the object have when created with these different functions?
- By using the code ncol() I can see how many columns there is with the different functions. 
- king1 and king2 have 11 columns and king3 and king4 have 1 column

4. Show the dataset so that we can see how R interprets each column
- Below I show the different datasets. 
- I do it by using head() and glimpse()

```{r eval = T}
# COMPLETE THE BLANKS BELOW WITH YOUR CODE, then turn the 'eval' flag in this chunk to TRUE.

kings1 <- read.csv("data/kings.csv")

class(kings1)


head(kings1)


glimpse(kings1)

ncol(kings1)

```


```{r eval = T}
kings2 <- read_csv("data/kings.csv")

class(kings2)


head(kings2)


glimpse(kings2)

ncol(kings2)
```


```{r eval = TRUE}
kings3 <- read.csv2("data/kings.csv")

class(kings3)


head(kings3)


glimpse(kings3)

ncol(kings3)
```


```{r eval=TRUE}
kings4 <- read_csv2("data/kings.csv")

class(kings4)


head(kings4)


glimpse(kings4)

ncol(kings4)
```

Eget datasÃ¦t 
```{r echo = FALSE}
read_csv("data/DKMON.csv")
```
```{r}
DKMON <- read_csv("data/DKMON.csv")
head(DKMON)
class(DKMON)
```



## Calculate the duration of reign for all the kings in your table
You can calculate the duration of reign in years with `mutate` function by subtracting the equivalents of your `startReign` from `endReign` columns and writing the result to a new column called `duration`. But first you need to check a few things:

* Is your data messy? Fix it before re-importing to R
* Do your start and end of reign columns contain NAs? Choose the right strategy to deal with them: `na.omit()`, `na.rm=TRUE`, `!is.na()`


Create a new column called  `duration` in the kings dataset, utilizing the `mutate()` function from tidyverse. Check with your group to brainstorm the options.

```{r eval=TRUE}
DKMONduration <- DKMON%>%
  mutate(duration = Regerings_Slut - Regerings_Start_, na.rm = T) %>%
  mutate(Regerings_Midt_ = Regerings_Start_ + duration/2)
glimpse(DKMONduration)

avg_duration <- mean(DKMONduration$duration, na.rm=T)
avg_duration
```

## Calculate the average duration of reign for all rulers
Do you remember how to calculate an average on a vector object? If not, review the last two lessons and remember that a column is basically a vector. So you need to subset your `kings` dataset to the `duration` column. If you subset it as a vector you can calculate average on it with `mean()` base-R function. If you subset it as a tibble, you can calculate average on it with `summarize()` tidyverse function. Try both ways!

* You first need to know how to select the relevant `duration` column. What are your options?
* Is your selected `duration` column a tibble or a vector? The `mean()` function can only be run on a vector. The `summarize()` function works on a tibble.
* Are you getting an error that there are characters in your column? Coerce your data to numbers with `as.numeric()`.
* Remember to handle NAs: `mean(X, na.rm=TRUE)`


```{r eval=TRUE}
mean(DKMONduration$duration, na.rm = TRUE)

summarize(DKMONduration)
```

## How many and which kings enjoyed a longer-than-average duration of reign?

You have calculated the average duration above. Use it now to `filter()` the `duration` column in  `kings` dataset. Display the result and also  count the resulting rows with `count()`

```{r eval=TRUE}
long_reign_king <- DKMONduration %>% 
  filter(duration>avg_duration)
long_reign_king%>%
  count()
print(long_reign_king) %>% 
  arrange(desc(long_reign_king$duration))
```


## How many days did the three longest-ruling monarchs rule? 

* Sort kings by reign `duration` in the descending order. Select the three longest-ruling monarchs with the `slice()` function
* Use `mutate()` to create `Days` column where you calculate the total number of days they ruled
* BONUS: consider the transition year (with 366 days) in your calculation!

```{r eval=TRUE}
longest_ruling_kings<- DKMONduration %>% 
  arrange(desc(duration)) %>% 
  slice(1:3)

longest_ruling_kings <- longest_ruling_kings %>% 
  mutate(Days=duration*365)

print(longest_ruling_kings)

```


## Challenge: Plot the kings' duration of reign through time

What is the long-term trend in the duration of reign among Danish monarchs? How does it relate to the historical violence trends ? 

* Try to plot the duration of reign column in `ggplot` with `geom_point()` and  `geom_smooth()`
* In order to peg the duration (which is between 1-99) somewhere to the x axis with individual centuries, I recommend creating a new column `midyear` by adding to `startYear` the product of `endYear` minus the `startYear` divided by two (`startYear + (endYear-startYear)/2`).
* Now you can plot the kings dataset, plotting `midyear` along the x axis and `duration` along y axis
* BONUS: add a title, nice axis labels to the plot and make the theme B&W and font bigger to make it nice and legible!

```{r}
# YOUR CODE

DKMONduration %>% 
  ggplot(aes(x=Regerings_Midt_, y = duration)) + geom_point() + geom_smooth()

```

And to submit this rmarkdown, knit it into html. But first, clean up the code chunks, adjust the date, rename the author and change the `eval=FALSE` flag to `eval=TRUE` so your script actually generates an output.
Well done!

